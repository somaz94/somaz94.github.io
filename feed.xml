<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Somaz Tech Blog</title>
    <description>DevOps engineer&apos;s tech blog. AWS, Kubernetes, Infrastructure as Code (IaC), Share experience and knowledge related to CI/CD and cloud native technology. It mainly deals with cloud infrastructure deployment, automation, monitoring, and security.</description>
    <link>https://somaz94.github.io/</link>
    <atom:link href="https://somaz94.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 16 Jan 2025 18:51:48 +0900</pubDate>
    <lastBuildDate>Thu, 16 Jan 2025 18:51:48 +0900</lastBuildDate>
    <generator>Jekyll v3.10.0</generator>
    
      <item>
        <title>ELK Stack Implementation Guide</title>
        <description>&lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;This guide explores the implementation of ELK Stack (Elasticsearch, Logstash, Kibana) for log collection, processing, and analysis.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-what-is-elk-stack&quot;&gt;🔍 What is ELK Stack?&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;ELK Stack combines three main components: Elasticsearch, Logstash, and Kibana. Recently, EFK Stack (with Filebeat) has also become popular as a lighter alternative.&lt;/p&gt; &lt;/blockquote&gt; &lt;hr /&gt; &lt;h3 id=&quot;️-architecture&quot;&gt;🏗️ Architecture&lt;/h3&gt; &lt;h4 id=&quot;-log-pipeline&quot;&gt;📝 Log Pipeline:&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Filebeat(log shipper) → Logstash(data processor) → Elasticsearch(storage) ← Kibana(visualization)&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;-metric-pipeline&quot;&gt;📊 Metric Pipeline:&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Metricbeat(metric collector) → Elasticsearch(storage) ← Kibana(visualization)&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;-apm-pipeline&quot;&gt;🔄 APM Pipeline:&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Applications(APM agents) → APM Server → Elasticsearch(storage) ← Kibana(visualization)&lt;/li&gt; &lt;/ul&gt;...</description>
        <pubDate>Sat, 18 Jan 2025 01:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/monitoring/elk-stack/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/monitoring/elk-stack/</guid>
        
        <category>elasticsearch</category>
        
        <category>logstash</category>
        
        <category>kibana</category>
        
        <category>monitoring</category>
        
        <category>MONITORING</category>
      </item>
    
      <item>
        <title>IPVS vs iptables in Kubernetes</title>
        <description>&lt;h2 id=&quot;concepts-of-ipvs-and-iptables&quot;&gt;Concepts of IPVS and iptables&lt;/h2&gt; &lt;h3 id=&quot;1️⃣-iptables-ip-table-rules&quot;&gt;1️⃣ iptables (IP table rules)&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; is a packet filtering and NAT (Network Address Translation) framework built into the Linux kernel. It defines rules that packets must pass through and decides whether to allow, deny, forward, or modify network traffic.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;How it works in Kubernetes:&lt;/strong&gt;&lt;br /&gt; Kubernetes uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; to route traffic between services and Pods. It implements round-robin load balancing by selecting backend Pods sequentially.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Advantages of iptables:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;✅ &lt;strong&gt;Stability:&lt;/strong&gt; Mature and widely used on Linux systems.&lt;br /&gt; ✅ &lt;strong&gt;Simplicity:&lt;/strong&gt; Easy to configure and troubleshoot.&lt;br /&gt;...</description>
        <pubDate>Fri, 17 Jan 2025 01:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/kubernetes/ipvs-iptables/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/kubernetes/ipvs-iptables/</guid>
        
        <category>kubernetes</category>
        
        <category>ipvs</category>
        
        <category>iptables</category>
        
        <category>KUBERNETES</category>
      </item>
    
      <item>
        <title>Understanding Network Address Translation (NAT)</title>
        <description>&lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;Network Address Translation (NAT) is a crucial networking technology that enables address translation between private and public networks.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-what-is-nat&quot;&gt;💡 What is NAT?&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;NAT converts network addresses from one type to another, primarily used to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Solve IP address shortage&lt;/li&gt; &lt;li&gt;Protect internal networks&lt;/li&gt; &lt;li&gt;Enable multiple devices to share one public IP&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;hr /&gt; &lt;h3 id=&quot;-nat-types&quot;&gt;🔄 NAT Types&lt;/h3&gt; &lt;h4 id=&quot;static-nat&quot;&gt;Static NAT&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;One-to-one mapping&lt;/li&gt; &lt;li&gt;Private to public IP&lt;/li&gt; &lt;li&gt;Used for web servers&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;dynamic-nat&quot;&gt;Dynamic NAT&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Pool of private IPs to pool of public IPs&lt;/li&gt; &lt;li&gt;No guaranteed consistent mapping&lt;/li&gt; &lt;li&gt;Used for outbound...</description>
        <pubDate>Tue, 07 Jan 2025 01:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/nat/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/nat/</guid>
        
        <category>networking</category>
        
        <category>nat</category>
        
        <category>snat</category>
        
        <category>dnat</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>Understanding Cloud Computing</title>
        <description>&lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;Cloud computing enables users to access computing resources over the internet, eliminating the need for physical infrastructure ownership.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-key-benefits&quot;&gt;💡 Key Benefits&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;📈 Scalability: Easily scale up or down based on demand&lt;/li&gt; &lt;li&gt;💰 Cost-Efficiency: Pay only for resources used&lt;/li&gt; &lt;li&gt;🌐 Accessibility: Access from anywhere with internet&lt;/li&gt; &lt;li&gt;🔄 Flexibility: Choose from various service options&lt;/li&gt; &lt;li&gt;🔧 Maintenance: Provider handles updates and maintenance&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;h3 id=&quot;️-cloud-deployment-models&quot;&gt;☁️ Cloud Deployment Models&lt;/h3&gt; &lt;h4 id=&quot;public-vs-private-cloud&quot;&gt;Public vs Private Cloud&lt;/h4&gt; &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Public Cloud: - Shared infrastructure - Multiple tenants - Internet accessible - Examples: AWS, Azure, GCP Private...</description>
        <pubDate>Mon, 06 Jan 2025 18:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/cloud-computing/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/cloud-computing/</guid>
        
        <category>cloud</category>
        
        <category>aws</category>
        
        <category>azure</category>
        
        <category>gcp</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>Understanding Processes and Threads</title>
        <description>&lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;Understanding the differences between processes and threads is crucial for software development. Let’s explore these concepts in detail.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-program-vs-process&quot;&gt;💡 Program vs Process&lt;/h3&gt; &lt;p&gt;A program is a set of instructions stored on disk, while a process is a running instance of a program. Key differences:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Program is static, Process is dynamic&lt;/li&gt; &lt;li&gt;Program is code, Process is code in execution&lt;/li&gt; &lt;li&gt;Multiple processes can run from the same program&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;h3 id=&quot;-process-vs-thread&quot;&gt;🔄 Process vs Thread&lt;/h3&gt; &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dkcm26aem/image/upload/v1737017116/process-thread_cuzjcm.png&quot; alt=&quot;HTTPS&quot; width=&quot;600&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://medium.com/javarevisited/most-people-in-tech-cant-answer-the-process-vs-thread-question-correctly-079635291e14&quot;&gt;image reference link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;process&quot;&gt;Process&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Independent entity with its own...</description>
        <pubDate>Mon, 06 Jan 2025 01:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/process-thread/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/process-thread/</guid>
        
        <category>process</category>
        
        <category>thread</category>
        
        <category>operating-system</category>
        
        <category>concurrency</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>Understanding Kubernetes Components and Pod Creation</title>
        <description>&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/ko/docs/concepts/overview/components/&quot;&gt;image reference link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;Let’s explore Kubernetes components and understand how pods are created within a cluster.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-why-kubernetes&quot;&gt;💡 Why Kubernetes?&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;Kubernetes offers several key benefits:&lt;/p&gt; &lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;🔄 Container Orchestration&lt;/li&gt; &lt;li&gt;📈 Scalability&lt;/li&gt; &lt;li&gt;⚖️ Load Balancing&lt;/li&gt; &lt;li&gt;🔨 High Availability&lt;/li&gt; &lt;li&gt;🚀 Automated Rollouts and Rollbacks&lt;/li&gt; &lt;li&gt;🔍 Service Discovery&lt;/li&gt; &lt;li&gt;💾 Storage Orchestration&lt;/li&gt; &lt;li&gt;🔐 Secret and Configuration Management&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;h3 id=&quot;️-kubernetes-components&quot;&gt;🏗️ Kubernetes Components&lt;/h3&gt; &lt;h4 id=&quot;control-plane-components&quot;&gt;Control Plane Components&lt;/h4&gt; &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. kube-apiserver - Central control point - Provides Kubernetes API - Handles Pod creation requests 2. etcd - Backup storage for cluster...</description>
        <pubDate>Sun, 05 Jan 2025 18:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/kubernetes-components-and-work/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/kubernetes-components-and-work/</guid>
        
        <category>kubernetes</category>
        
        <category>container</category>
        
        <category>orchestration</category>
        
        <category>pod</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>Understanding HTTP Methods and Status Codes</title>
        <description>&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://raonctf.com/essential/study/web/http&quot;&gt;image reference link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;HTTP methods define how clients communicate with web servers. Let’s explore each method and their corresponding status codes.&lt;/p&gt; &lt;hr /&gt; &lt;div style=&quot;width: 100%; margin: auto; margin-top: 40px;&quot;&gt; &lt;!-- ✅ 위쪽 여백 추가 --&gt; &lt;div class=&quot;mermaid&quot;&gt; graph TD; A[🌐 HTTP Request Methods] --&amp;gt; B[🔍 GET Request]; A --&amp;gt; C[📝 POST Request]; A --&amp;gt; D[📄 HEAD Request]; B --&amp;gt; B1[💡 Used when typing URL in browser]; B1 --&amp;gt; B2[📄 GET /cat.png]; B2 --&amp;gt; B3[📦 200 OK \n Content-Type: image/png]; B3 --&amp;gt; B4[🖼️ Display Cat Image]; C --&amp;gt; C1[📤 Submitting a form]; C1 --&amp;gt;...</description>
        <pubDate>Sun, 05 Jan 2025 01:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/understanding-http-method/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/understanding-http-method/</guid>
        
        <category>http</category>
        
        <category>api</category>
        
        <category>rest</category>
        
        <category>web</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>Understanding Virtualization Technologies</title>
        <description>&lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;Virtualization is a technology that creates virtual versions of physical devices or resources within a system. Let’s explore different types of virtualization and their implementations.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-types-of-virtualization&quot;&gt;🔍 Types of Virtualization&lt;/h3&gt; &lt;h4 id=&quot;️-server-virtualization&quot;&gt;🖥️ Server Virtualization&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Host-based (VMware, VirtualBox)&lt;/li&gt; &lt;li&gt;Bare-metal (Xen, KVM)&lt;/li&gt; &lt;li&gt;Container (Docker)&lt;/li&gt; &lt;li&gt;Type 1 Hypervisor (Direct on hardware)&lt;/li&gt; &lt;li&gt;Type 2 Hypervisor (Runs on OS)&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;-storage-virtualization&quot;&gt;💾 Storage Virtualization&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;SAN (Storage Area Network)&lt;/li&gt; &lt;li&gt;NAS (Network Attached Storage)&lt;/li&gt; &lt;li&gt;DAS (Direct Attached Storage)&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;-network-virtualization&quot;&gt;🌐 Network Virtualization&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;VPN (Virtual Private Network)&lt;/li&gt; &lt;li&gt;VLAN (Virtual Local Area Network)&lt;/li&gt; &lt;li&gt;VXLAN (Virtual Extensible LAN)&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt;...</description>
        <pubDate>Sat, 04 Jan 2025 18:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/virtualization/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/virtualization/</guid>
        
        <category>virtualization</category>
        
        <category>cloud</category>
        
        <category>containers</category>
        
        <category>networking</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>Understanding HTTP and HTTPS Protocols</title>
        <description>&lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;HTTP (Hypertext Transfer Protocol) and HTTPS (Hypertext Transfer Protocol Secure) are protocols for transmitting data over the internet. Let’s explore their differences and implementation.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-http-hypertext-transfer-protocol&quot;&gt;🌐 HTTP (Hypertext Transfer Protocol)&lt;/h3&gt; &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dkcm26aem/image/upload/v1736996284/http_hl1dtl.png&quot; alt=&quot;HTTP&quot; width=&quot;100&quot; /&gt;&lt;/p&gt; &lt;h4 id=&quot;-concept&quot;&gt;📝 Concept&lt;/h4&gt; &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Protocol defining data transfer between web browsers and servers - Supports HTML, images, video, audio, and other content types - Transmitted as unencrypted text (security vulnerable) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;️-working-process&quot;&gt;⚙️ Working Process&lt;/h4&gt; &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Client sends HTTP request message: - Contains HTTP method (GET, POST, PUT, DELETE) - Includes request...</description>
        <pubDate>Sat, 04 Jan 2025 01:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/http-https/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/http-https/</guid>
        
        <category>http</category>
        
        <category>https</category>
        
        <category>ssl</category>
        
        <category>security</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>Understanding DNS - How Domain Name System Works</title>
        <description>&lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;Let’s explore how DNS (Domain Name System) works, from basic concepts to detailed operations.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-working-process&quot;&gt;📝 Working Process&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;User accesses website (www.a.com)&lt;/li&gt; &lt;li&gt;Computer checks local DNS cache&lt;/li&gt; &lt;li&gt;If not in cache, DNS query begins&lt;/li&gt; &lt;li&gt;Root DNS server IP address is obtained&lt;/li&gt; &lt;li&gt;Query sent to Root DNS for TLD server address&lt;/li&gt; &lt;li&gt;Query sent to TLD DNS for Authoritative DNS server address&lt;/li&gt; &lt;li&gt;Query sent to Authoritative DNS for IP address&lt;/li&gt; &lt;li&gt;IP address cached and returned to browser&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;-what-is-dns&quot;&gt;🔍 What is DNS?&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;DNS (Domain Name System) is a system that converts human-readable...</description>
        <pubDate>Fri, 03 Jan 2025 18:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/understanding-dns/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/understanding-dns/</guid>
        
        <category>dns</category>
        
        <category>cs</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>How Web Browsers Work</title>
        <description>&lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;Let’s explore how web browsers work internally, from the moment a user enters a URL until the page is displayed.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-summary&quot;&gt;📝 Summary&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;User accesses website through browser (www.a.com)&lt;/li&gt; &lt;li&gt;Browser identifies server’s IP address through DNS&lt;/li&gt; &lt;li&gt;Browser and server perform 3-Way Handshake&lt;/li&gt; &lt;li&gt;Browser sends HTTP Request to server&lt;/li&gt; &lt;li&gt;Server sends HTTP Response to browser&lt;/li&gt; &lt;li&gt;Browser parses HTML to create DOM Tree&lt;/li&gt; &lt;li&gt;Upon encountering Style tags, pauses DOM creation to parse CSS and create CSSOM Tree&lt;/li&gt; &lt;li&gt;When encountering script tags, passes control to JavaScript engine to parse and create AST&lt;/li&gt; &lt;li&gt;Creates Render Tree by combining...</description>
        <pubDate>Fri, 03 Jan 2025 01:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/web-browser-work/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/web-browser-work/</guid>
        
        <category>browser</category>
        
        <category>web</category>
        
        <category>networking</category>
        
        <category>rendering</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>Understanding OSI 7 Layers and TCP/IP 4 Layers</title>
        <description>&lt;h2 id=&quot;-overview&quot;&gt;🎯 Overview&lt;/h2&gt; &lt;p&gt;Let’s explore the OSI 7 Layer model and TCP/IP 4 Layer model, understanding their structures and differences.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;-osi-7-layers&quot;&gt;🌐 OSI 7 Layers&lt;/h3&gt; &lt;h4 id=&quot;-what-is-osi&quot;&gt;📝 What is OSI?&lt;/h4&gt; &lt;p&gt;The OSI (Open Systems Interconnection) model is a reference model for network protocol stacks developed by ISO (International Organization for Standardization).&lt;/p&gt; &lt;h4 id=&quot;-layer-structure&quot;&gt;🔍 Layer Structure&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;🔶 OSI Model (7 Layers):&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;Application (🔗):&lt;/strong&gt; Interfaces with the user and provides network services (HTTP, FTP).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Presentation (🎨):&lt;/strong&gt; Formats and encrypts data for the application layer.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Session (🗂️):&lt;/strong&gt; Manages sessions and connections between devices.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Transport (📤):&lt;/strong&gt; Ensures reliable data transfer (TCP,...</description>
        <pubDate>Thu, 02 Jan 2025 21:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/cs/osi-layer/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/cs/osi-layer/</guid>
        
        <category>cs</category>
        
        <category>osi</category>
        
        <category>tcp/ip</category>
        
        <category>protocols</category>
        
        <category>network</category>
        
        <category>CS</category>
      </item>
    
      <item>
        <title>Welcome to My DevOps Journey</title>
        <description>&lt;h2 id=&quot;welcome-to-my-devops-journey&quot;&gt;Welcome to My DevOps Journey&lt;/h2&gt; &lt;p&gt;As a DevOps engineer, I’ve had the opportunity to work with various modern technologies and practices. In this blog, I’ll be sharing my experiences and insights about:&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;cloud-service-providers-csp&quot;&gt;Cloud Service Providers (CSP)&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;AWS architecture and services&lt;/li&gt; &lt;li&gt;Google Cloud Platform (GCP) implementations&lt;/li&gt; &lt;li&gt;Multi-cloud strategies and best practices&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;cicd--automation&quot;&gt;CI/CD &amp;amp; Automation&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;GitHub Actions workflows and custom actions&lt;/li&gt; &lt;li&gt;GitLab CI pipeline optimization&lt;/li&gt; &lt;li&gt;Jenkins automation&lt;/li&gt; &lt;li&gt;ArgoCD and Flux for GitOps&lt;/li&gt; &lt;li&gt;Infrastructure as Code (IaC) with Terraform, Ansible, and Pulumi&lt;/li&gt; &lt;li&gt;Custom automation tools and scripts&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;container--orchestration&quot;&gt;Container &amp;amp; Orchestration&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Kubernetes cluster...</description>
        <pubDate>Thu, 02 Jan 2025 01:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/devops/welcome-to-my-devops-journey/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/devops/welcome-to-my-devops-journey/</guid>
        
        <category>devops</category>
        
        <category>DEVOPS</category>
      </item>
    
      <item>
        <title>Grammar Post</title>
        <description>&lt;p&gt;Among companions born from great hardship and challenges, ridiculous situations will be born. &lt;em&gt;I strive to be as brave as a lion.&lt;/em&gt; Carefully designed decorations are more attractive than random placements. A balanced structure is more effective than chaos. Complete focus leads to better outcomes.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Take control of your time effectively. Don’t let anxiety take over your mind. Stay strong and steady.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;The gateway to success is built on great foundations. Solid structure leads to powerful results. Confidence grows from consistent effort.&lt;/p&gt; &lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt; &lt;p&gt;HTML defines a long list of available inline tags, a complete list...</description>
        <pubDate>Wed, 01 Jan 2025 21:00:00 +0900</pubDate>
        <link>https://somaz94.github.io/category/etc/grammar/</link>
        <guid isPermaLink="true">https://somaz94.github.io/category/etc/grammar/</guid>
        
        <category>grammar</category>
        
        <category>ETC</category>
      </item>
    
  </channel>
</rss>
